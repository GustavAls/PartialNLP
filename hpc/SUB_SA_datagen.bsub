#!/bin/sh
### General options
### â€“- specify queue --
#BSUB -q gpuv100
### -- set the job Name --
#BSUB -J SA_datarun[1]
### -- ask for number of cores (default: 1) --
#BSUB -n 4
### -- Select the resources: 1 gpu in exclusive process mode --
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 0:30
# request 10GB of system-memory
#BSUB -R "rusage[mem=5GB]"
#BSUB -R "span[hosts=1]"
### -- set the email address --
# please uncomment the following line and put in your e-mail address,
# if you want to receive e-mail notifications on a non-default address
###BSUB -u your_email_address
### -- send notification at start --
##BSUB -B
### -- send notification at completion--
##BSUB -N
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o out/gpu_%J.out
#BSUB -e out/gpu_%J.err
# -- end of LSF options --

# Activate the python eviorment
module load python3/3.9.11
source ~/PartialNLP/scratch/s184400/partial_venv/bin/activate
# Set python path
export PYTHONPATH=$PYTHONPATH:~/PartialNLP/
export PYTHONPATH=$PYTHONPATH:~/PartialNLP/scratch/s184400/cloned_repos/

nvidia-smi
# Load the cuda module
module load cuda/11.7
/appl/cuda/11.7.0/samples/bin/x86_64/linux/release/deviceQuery

echo "Running script..."
# Send sample job to GPU

runs=(0 1 2 3 4)

# Get the values for this job array task using LSB_JOBINDEX
#train_size="${train_sizes[$LSB_JOBINDEX - 1]}"
#num_epoch="${num_epochs_list[$LSB_JOBINDEX - 1]}"

run="${runs[$LSB_JOBINDEX - 1]}"

##### ADD INFO HERE ####
dataset="imdb"

# Create some folders
dir_outpath="scratch/s184400/SA_results/Init/${dataset}_dataset_test/run_${run}"

# Make the directories if they don't exist
mkdir -p $dir_outpath

# Run the training
python3 SentimentAnalysis/SentimentClassifier.py \
    --output_path $dir_outpath \
    --train_batch_size 32 \
    --eval_batch_size 32 \
    --device_batch_size 32 \
    --run $run \
    --num_epochs 1.0 \
    --dataset_name $dataset \
    --learning_rate 5e-05 \
    --train_size 1.0 \
    --laplace False \
    --no_cuda False \
    --save_strategy "epoch" \
    --evaluation_strategy "epoch" \


if [ $? -eq 0 ]; then
    echo "Success"
    exit 0
else
    echo "Error"
    exit 1
fi